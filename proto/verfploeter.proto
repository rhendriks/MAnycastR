// This file is used in combination with rust protobuf https://docs.rs/protobuf/latest/protobuf/
// https://blog.logrocket.com/rust-and-grpc-a-complete-guide/
// This file details the protocol buffers, which contain the data exchanged between the server/clients.

// version of protocol buffer used
syntax = "proto3";
package verfploeter;

// The controller which controls and is responsible for most communication
service Controller {
  // Client lets the server know the measurement is finished
  rpc MeasurementFinished(Finished) returns (Ack) {}
  // Client announces itself, and starts its connection with the Server. The server sends a stream of tasks
  rpc WorkerConnect(Metadata) returns (stream Task) {}
  // CLI instructs Server to perform a measurement
  rpc DoMeasurement(ScheduleMeasurement) returns (stream TaskResult) {}
  // CLI asks orchestrator to list workers, orchestrator returns ClientList
  rpc ListWorkers(Empty) returns (WorkerList) {}
  // Worker sends TaskResult to orchestrator
  rpc SendResult(TaskResult) returns (Ack) {}
  // Worker obtains a unique worker ID from the orchestrator
  rpc GetWorkerID(Metadata) returns (WorkerID) {}
}

// Empty message
message Empty {}

// Acknowledgement of a measurement, with a boolean whether it was successful or not, and a possible error message.
message Ack {
  bool success = 1;
  string error_message = 2;
}

// Finished message, sent by a client to the server when a measurement is finished, or as acknowledgement of a received task result
message Finished {
  uint32 measurement_id = 1;
  uint32 client_id = 2;
}

// A client ID
message WorkerID {uint32 client_id = 1;}

// Schedule a measurement with the Server
message ScheduleMeasurement {
  uint32 rate = 1;
  repeated uint32 clients = 2;
  Origin origin = 3; // Default origin to use (for all clients)  // TODO combine 3 and 4 into one
  repeated Configuration configurations = 4; // Configuration of client and origin combinations
  uint32 measurement_type = 5;
  bool unicast = 6;
  bool ipv6 = 7;
  bool traceroute = 8;
  uint32 interval = 9;
  bool responsive = 10;
  bool divide = 11;
  Targets targets = 12;
  string record = 13; // Record to send CHAOS (TXT) or A/AAAA requests for
  string url = 14;
}

// A list of Client (an empty list is used when all clients have to send out probes)
message WorkerList {
  repeated Client clients = 1;
}

// A client, which contains a client ID, and metadata
message Client {
  fixed32 client_id = 1;
  Metadata metadata = 2;
}

// Metadata (as used in Client), contains a hostname
message Metadata {
  string hostname = 1;
}

// Address message, can be either an IPv4 or IPv6 address
message Address {
  oneof value {
    fixed32 v4 = 1;
    IPv6 v6 = 2;
  }
}

// IPv6 address message (protobuf does not support 128 bit values)
message IPv6 {
  fixed64 p1 = 1;
  fixed64 p2 = 2;
}

// A task for a Client, can be either a Start, Ping, UDP, TCP, or an Empty task
message Task {
  oneof data {
    End end = 1; // End measurement
    Start start = 2; // Start measurement
    Targets targets = 3; // Targets to measure
    Trace trace = 4;
  }
}

// A start message, indicates the probing rate (packets per second), whether the client should send out probes, the measurement type, and the source address to be used
message Start {
  uint32 rate = 1;
  bool active = 2;
  uint32 measurement_id = 3;
  uint32 measurement_type = 4;
  repeated Origin tx_origins = 5; // origins to send with
  bool unicast = 6;
  bool ipv6 = 7;
  bool traceroute = 8;
  repeated Origin rx_origins = 9; // origins to listen for
  string record = 10; // domain to use for DNS queries (TXT/A/AAAA)
  string url = 11; // URL encoded in probes
}

// An end message, indicates the client should stop sending out probes
message End {
  uint32 code = 1; // 0 -> finished, 1 -> CLI disconnect
}

// Origin: the source address and port combinations used by clients in a measurement
message Origin {
  Address src = 1;
  fixed32 sport = 2;
  fixed32 dport = 3;
}

// Configuration: mapping of client ID to origin
message Configuration {
  Origin origin = 1;
  uint32 client_id = 2;
}

// A traceroute task, which has a destination address, a max_ttl (expected number of hops to traceroute), and a list of flows (a unique flow for each receiving client)
message Trace {
  Address dst = 1;
  uint32 max_ttl = 2;
  repeated Origin origins = 3;
}

// A list of target addresses
message Targets {
  repeated Address dst_addresses = 1;
}

// A TaskResult, contains the Client that executed the task, and a list of results
message TaskResult {
  uint32 client_id = 1;
  repeated VerfploeterResult result_list = 2;
}

// A result, either a PingResult, UDPResult, or TCPResult
message VerfploeterResult {
  oneof value {
    PingResult ping = 1;
    UDPResult udp = 2;
    TCPResult tcp = 3;
    TraceResult trace = 4;
  }
}

// IPResult, contains either an IPv4Result or an IPv6Result, and the TTL
message IPResult {
  oneof value {
    IPv4Result ipv4 = 1;
    IPv6Result ipv6 = 2;
  }
  fixed32 ttl = 3;
}

// IPv4Result, contains all information extracted from the IPv4 header: source, destination addresses and TTL
message IPv4Result {
  fixed32 src = 1;
  fixed32 dst = 2;
}

// IPv6Result, contains all information extracted from the IPv6 header: source, destination addresses
message IPv6Result {
  IPv6 src = 1;
  IPv6 dst = 2;
}

// TraceResult, contains the IP result, TTL, receive time, transmit time, and the sender client ID
message TraceResult {
  IPResult ip_result = 1; // IP result of the host that replied to the traceroute probe
  uint32 ttl = 2; // TTL of the traceroute probe that resulted in this trace result
  uint64 rx_time = 3; // receive time of the traceroute probe that resulted in this trace result
  uint64 tx_time = 4; // transmit time of the traceroute probe that resulted in this trace result
  uint32 tx_client_id = 5; // client ID of the client that sent out the traceroute probe that resulted in this trace result
  oneof value { // Depending on the protocol used, the trace result contains a ping, udp, or tcp result
    PingResult ping = 6;
    UDPResult udp = 7;
    TCPResult tcp = 8;
  }
}

// Result of a ping which has a receive time, an ipv4 result, and the ping payload information
message PingResult {
  uint64 rx_time = 1;
  IPResult ip_result = 2;
  PingPayload payload = 3;
}

// PingPayload. The payload of a ping which contains the transmission time, source/dest address, and the sender client ID
message PingPayload {
  uint64 tx_time = 1;
  Address src = 2;
  Address dst = 3;
  fixed32 tx_client_id = 4;
}

// UDP result contains the receive time, source and destination port, an ipv4 result, the UDP payload, and a code (0-15 for ICMP codes, 16 => UDP response)
message UDPResult {
  uint64 rx_time = 1;
  fixed32 sport = 2;
  fixed32 dport = 3;
  fixed32 code = 4;
  IPResult ip_result = 5;
  UDPPayload payload = 6;
}

// UDP payload, which contains the transmission time, source/dest address, and the sender client ID
message UDPPayload {
  oneof value {
    DNS_A_Record dns_a_record = 1;
    DNS_CHAOS dns_chaos = 2;
  }
}

// UDP payload, which is extracted from the domain of the DNS A Record reply, containing information about the probe
message DNS_A_Record {
  uint64 tx_time = 1;
  Address src = 2; // we can't fit 128 bit addresses into the domain (so for ipv6 we store the 32 right-most bits)
  Address dst = 3;
  fixed32 tx_client_id = 4;
  fixed32 sport = 5;
}

// CHAOS payload, which is extracted from the domain of the DNS CHAOS reply
message DNS_CHAOS {
  fixed32 tx_client_id = 1;
  string chaos_data = 2;
}

// TCP result which contains a receive time, an ipv4 result, source & destination ports, and the ack & seq numbers
message TCPResult {
  uint64 rx_time = 1;
  IPResult ip_result = 2;
  fixed32 sport = 3;
  fixed32 dport = 4;
  fixed32 seq = 5;
  fixed32 ack = 6;
}
