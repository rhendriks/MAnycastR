// This file is used in combination with rust protobuf https://docs.rs/protobuf/latest/protobuf/
// https://blog.logrocket.com/rust-and-grpc-a-complete-guide/
// This file details the protocol buffers, which contain the data exchanged between the server/clients.

// version of protocol buffer used
syntax = "proto3";
package verfploeter;

// The controller which controls and is responsible for most communication
service Controller {
  // Client lets the server know the task is finished
  rpc TaskFinished(Finished) returns (Ack) {}
  // Client announces itself, and starts connection with the Server. The server sends a stream of Task
  rpc ClientConnect(Metadata) returns (stream Task) {}
  // CLI instructs Server to perform a task
  rpc DoTask(ScheduleTask) returns (stream TaskResult) {}
  // CLI asks Server to list clients, Server returns ClientList
  rpc ListClients(Empty) returns (ClientList) {}
  // Client sends TaskResult to Server
  rpc SendResult(TaskResult) returns (Ack) {}
  // Client obtains a unique client ID from the server
  rpc GetClientId(Metadata) returns (ClientId) {}
}

// Empty message
message Empty {}

// Acknowledgement of a task, with a boolean whether it was successful or not, and a possible error message.
message Ack {
  bool success = 1;
  string error_message = 2;
}

// TaskFinished message, sent by a client to the server when a task is finished
message Finished {
  uint32 task_id = 1;
  uint32 client_id = 2;
}

// A client ID
message ClientId {uint32 client_id = 1;}

// Schedule a task with the Server can be either a Ping, UDP, or TCP task, with a probing rate, source address, and a list of clients that have to send out probes
message ScheduleTask {
  uint32 rate = 1;
  repeated uint32 clients = 2;
  Address source_address = 3; // TODO let CLI set the port number
  uint32 task_type = 4;
  bool unicast = 5;
  bool ipv6 = 6;
  bool traceroute = 7;
  oneof data {
    Ping ping = 8;
    UDP udp = 9;
    TCP tcp = 10;
  }
}

// A list of Client (an empty list is used when all clients have to send out probes)
message ClientList {
  repeated Client clients = 1;
}

// A client, which contains a client ID, and metadata
message Client {
  fixed32 client_id = 1;
  Metadata metadata = 2;
}

// Metadata (as used in Client), contains a hostname, a source address and port (0 if client uses the default source/port)
message Metadata {
  string hostname = 1;
  Origin origin = 2;
}

// Address message, can be either an IPv4 or IPv6 address
message Address {
  oneof value {
    fixed32 v4 = 1;
    IPv6 v6 = 2;
  }
}

// IPv6 address message (since protobuf does not support 128 bit values)
message IPv6 {
  fixed64 p1 = 1;
  fixed64 p2 = 2;
}

// A task for a Client, can be either a Start, Ping, UDP, TCP, or an Empty task
message Task {
  oneof data {
    End end = 1;
    Start start = 2;
    Ping ping = 3;
    UDP udp = 4;
    TCP tcp = 5;
    Empty empty = 6;
    Trace trace = 7;
  }
}

// A start message, indicates the probing rate (packets per second), whether the client should send out probes, the type of task, and the source address to be used
message Start {
  uint32 rate = 1;
  bool active = 2;
  uint32 task_id = 3;
  uint32 task_type = 4;
  Address source_address = 5; // TODO remove this and add the CLI's source address to origins
  bool unicast = 6;
  bool ipv6 = 7;
  bool traceroute = 8;
  repeated Origin origins = 9;
}

// An end message, indicates the client should stop sending out probes
message End {
}

// Origin: the source address and port combinations used by clients in a task
message Origin {
  Address source_address = 1;
  fixed32 source_port = 2;
}

// A traceroute task, which has a destination address, a max_ttl (expected number of hops to traceroute), and a list of flows (a unique flow for each receiving client)
message Trace {
  Address destination_address = 1;
  uint32 max_ttl = 2;
  repeated Origin origins = 3;
}

// A Ping, which has a list of destination addresses
message Ping {
  repeated Address destination_addresses = 1;
}

// UDP, which has a list of destination addresses
message UDP {
  repeated Address destination_addresses = 1;
}

// TCP, which has a list of destination addresses
message TCP {
  repeated Address destination_addresses = 1;
}

// A TaskResult, contains the Client that executed the task, and a list of results
message TaskResult {
  uint32 client_id = 1;
  repeated VerfploeterResult result_list = 2;
}

// A result, either a PingResult, UDPResult, or TCPResult
message VerfploeterResult {
  oneof value {
    PingResult ping = 1;
    UDPResult udp = 2;
    TCPResult tcp = 3;
    TraceResult trace = 4;
  }
}

message IPResult {
  oneof value {
    IPv4Result ipv4 = 1;
    IPv6Result ipv6 = 2;
  }
  fixed32 ttl = 3;
}

// IPv4Result, contains all information extracted from the IPv4 header: source, destination addresses and TTL
message IPv4Result {
  fixed32 source_address = 1;
  fixed32 destination_address = 2;
}

message IPv6Result {
  IPv6 source_address = 1;
  IPv6 destination_address = 2;
}

message TraceResult {
  IPResult ip_result = 1; // IP result of the host that replied to the traceroute probe
  uint32 ttl = 2; // TTL of the traceroute probe that resulted in this trace result
  uint64 receive_time = 3; // receive time of the traceroute probe that resulted in this trace result
  uint64 transmit_time = 4; // transmit time of the traceroute probe that resulted in this trace result
  uint32 sender_client_id = 5; // client ID of the client that sent out the traceroute probe that resulted in this trace result
  oneof value { // Depending on the protocol used, the trace result contains a ping, udp, or tcp result
    PingResult ping = 6;
    UDPResult udp = 7;
    TCPResult tcp = 8;
  }
}

// Result of a ping which has a receive time, an ipv4 result, and the ping payload information
message PingResult {
  uint64 receive_time = 1;
  IPResult ip_result = 2;
  PingPayload payload = 3;
}

// PingPayload. The payload of a ping which contains the transmission time, source/dest address, and the sender client ID
message PingPayload {
  uint64 transmit_time = 1;
  Address source_address = 2;
  Address destination_address = 3;
  fixed32 sender_client_id = 4;
}

// UDP result contains the receive time, source and destination port, an ipv4 result, the UDP payload, and a code (0-15 for ICMP codes, 16 => UDP response)
message UDPResult {
  uint64 receive_time = 1;
  fixed32 source_port = 2;
  fixed32 destination_port = 3;
  fixed32 code = 4;
  IPResult ip_result = 5;
  UDPPayload payload = 6;
}

message UDPPayload {
  oneof value {
    DNS_A_Record dns_a_record = 1;
    DNS_CHAOS dns_chaos = 2;
  }
}

// UDP payload, which is extracted from the domain of the DNS A Record reply, containing information about the probe
message DNS_A_Record {
  uint64 transmit_time = 1;
  Address source_address = 2; // we can't fit 128 bit addresses into the domain (so for ipv6 we store the 32 right-most bits)
  Address destination_address = 3;
  fixed32 sender_client_id = 4;
  fixed32 source_port = 5;
}

message DNS_CHAOS {
  fixed32 sender_client_id = 1;
  string chaos_data = 2;
}

// TCP result which contains a receive time, an ipv4 result, source & destination ports, and the ack & seq numbers
message TCPResult {
  uint64 receive_time = 1;
  IPResult ip_result = 2;
  fixed32 source_port = 3;
  fixed32 destination_port = 4;
  fixed32 seq = 5;
  fixed32 ack = 6;
}
