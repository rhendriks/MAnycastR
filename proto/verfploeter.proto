// This file is used in combination with rust protobuf https://docs.rs/protobuf/latest/protobuf/
// https://blog.logrocket.com/rust-and-grpc-a-complete-guide/
// This file details the protocol buffers, which contain the data exchanged between the server/clients.

// version of protocol buffer used
syntax = "proto3";
package verfploeter;

// The controller which controls and is responsible for most communication
service Controller {
  // Client lets the server know the task is finished
  rpc TaskFinished(TaskId) returns (Ack) {}
  // Client announces itself, and starts connection with the Server. The server sends a stream of Task
  rpc ClientConnect(Metadata) returns (stream Task) {}
  // CLI instructs Server to perform a task
  rpc DoTask(ScheduleTask) returns (stream TaskResult) {}
  // CLI asks Server to list clients, Server returns ClientList
  rpc ListClients(Empty) returns (ClientList) {}
  // Client sends TaskResult to Server
  rpc SendResult(TaskResult) returns (Ack) {}
  // Client obtains a unique client ID from the server
  rpc GetClientId(Metadata) returns (ClientId) {}
}

// Empty message
message Empty {}

// Acknowledgement of a task, with a boolean whether it was successful or not, and a possible error message.
message Ack {
  bool success = 1;
  string error_message = 2;
}

// A task ID
message TaskId { uint32 task_id = 1; }

// A client ID
message ClientId {uint32 client_id = 1;}

// Schedule a task with the Server with a rate (packets/second), can be either a Ping, UDP, or TCP task
message ScheduleTask {
  uint32 rate = 1;
  oneof data {
    Ping ping = 2;
    UDP udp = 3;
    TCP tcp = 4;
  }
}

// A list of Client
message ClientList {
  repeated Client clients = 1;
}

// A client, which contains a client ID, and metadata
message Client {
  fixed32 client_id = 1;
  Metadata metadata = 2;
}

// Metadata (as used in Client), contains a hostname
message Metadata {
  string hostname = 1;
}

// A task for a Client, with a task ID, the probing rate (probes / second) can be either a Ping, UDP, TCP, or an Empty task
message Task {
  uint32 task_id = 1;
  uint32 rate = 2;
  oneof data {
    Ping ping = 3;
    UDP udp = 4;
    TCP tcp = 5;
    Empty empty = 6;
  }
}

// A Ping, which has a single source address and a list of destination addresses
message Ping {
  fixed32 source_address = 1;
  repeated fixed32 destination_addresses = 2;
}

// UDP, which has a single source address and a list of destination addresses
message UDP {
  fixed32 source_address = 1;
  repeated fixed32 destination_addresses = 2;
}

// TCP, which has a single source address and a list of destination addresses
message TCP {
  fixed32 source_address = 1;
  repeated fixed32 destination_addresses = 2;
}

// A TaskResult, contains the task ID, Client that executed the task, and a list of results
message TaskResult {
  uint32 task_id = 1;
  Client client = 2;
  repeated VerfploeterResult result_list = 3;
}

// A result, either a PingResult, UDPResult, or TCPResult
message VerfploeterResult {
  oneof value {
    PingResult ping = 1;
    UDPResult udp = 2;
    TCPResult tcp = 3;
  }
}

// IPv4Result, contains all information extracted from the IPv4 header: source, destination addresses and TTL
message IPv4Result {
  fixed32 source_address = 1;
  fixed32 destination_address = 2;
  fixed32 ttl = 3;
}

// Result of a ping which has a receive time, an ipv4 result, and the ping payload information
message PingResult {
  uint64 receive_time = 1;
  IPv4Result ipv4_result = 2;
  PingPayload payload = 3;
}

// PingPayload. The payload of a ping, with task ID, transmission time, source/dest address.
message PingPayload {
  uint64 transmit_time = 1;
  fixed32 source_address = 2;
  fixed32 destination_address = 3;
  fixed32 sender_client_id = 4;
}

// UDP result contains the receive time, source and destination port from the UDP header, an ipv4 result, the UDP payload,
// and a code (0-15 for ICMP codes, 16 => UDP response)
message UDPResult {
  uint64 receive_time = 1;
  fixed32 source_port = 2;
  fixed32 destination_port = 3;
  fixed32 code = 4;
  IPv4Result ipv4_result = 5;
  UDPPayload payload = 6;
}

// UDP payload, which is extracted from the domain of the DNS A Record reply
message UDPPayload {
  uint64 transmit_time = 1;
  fixed32 source_address = 2;
  fixed32 destination_address = 3;
  fixed32 sender_client_id = 4;
  fixed32 source_port = 5;
}

// TCP result which contains a receive time, source & destination ports, ack and seq, and a receive time
message TCPResult {
  uint64 receive_time = 1;
  IPv4Result ipv4_result = 2;
  fixed32 source_port = 3;
  fixed32 destination_port = 4;
  fixed32 seq = 5;
  fixed32 ack = 6;
}