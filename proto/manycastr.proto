syntax = "proto3";
package manycastr;

// The controller which controls and is responsible for most communication
service Controller {
  // Worker lets the orchestrator know the measurement is finished
  rpc MeasurementFinished(Finished) returns (Ack) {}
  // Worker announces itself, and starts its connection with the orchestrator. The orchestrator sends a stream of tasks
  rpc WorkerConnect(Worker) returns (stream Task) {}
  // CLI instructs orchestrator to perform a measurement
  rpc DoMeasurement(ScheduleMeasurement) returns (stream TaskResult) {}
  // CLI asks orchestrator its current status (list of connected workers and measurements)
  rpc ListWorkers(Empty) returns (Status) {}
  // Worker sends TaskResult to orchestrator
  rpc SendResult(TaskResult) returns (Ack) {}
}

// Empty message
message Empty {}

// Acknowledgement of a measurement with a boolean whether it was successful or not and a possible error message.
message Ack {
  bool is_success = 1;
  string error_message = 2;
}

// Finished message, sent by a worker to the orchestrator when a measurement is finished, or as acknowledgement of a received task result
message Finished {
  uint32 measurement_id = 1;
  uint32 worker_id = 2;
}

// Schedule a measurement with the orchestrator
message ScheduleMeasurement {
  uint32 rate = 1;
  repeated Configuration configurations = 2; // Configuration of worker and origin combinations
  uint32 measurement_type = 3;
  bool is_unicast = 4;
  bool is_ipv6 = 5;
  uint32 interval = 6;
  bool is_responsive = 7;
  bool is_latency = 8;
  bool is_divide = 9;
  Targets targets = 10;
  string record = 11; // Record to send CHAOS (TXT) or A/AAAA requests for
  string url = 12; // URL to encode in probes (e.g., opt-out link)
}

// A list of workers
message Status {
  repeated Worker workers = 1;
}

// Worker definition, contains a worker ID, metadata (hostname), and a list of current measurements
message Worker {
  fixed32 worker_id = 1;
  string hostname = 2;
  string status = 3; // IDLE, PROBING, LISTENING, DISCONNECTED
}

// Address message, can be either an IPv4 or IPv6 address
message Address {
  oneof value {
    fixed32 v4 = 1;
    IPv6 v6 = 2;
  }
}

// IPv6 address message (protobuf does not support 128 bit values)
message IPv6 {
  fixed64 p1 = 1;
  fixed64 p2 = 2;
}

// A task for a worker, either a start or end message, or a list of targets
message Task {
  oneof data {
    End end = 1; // End measurement
    Start start = 2; // Start measurement
    Targets targets = 3; // Targets to measure
  }
  optional uint32 worker_id = 4; // Unique worker ID for the client
}

// A start message, forwards the configuration to the worker
message Start {
  uint32 rate = 1;
  uint32 measurement_id = 2;
  uint32 measurement_type = 3;
  repeated Origin tx_origins = 4; // origins to send with
  bool is_unicast = 5;
  bool is_ipv6 = 6;
  repeated Origin rx_origins = 7; // origins to listen for
  string record = 8; // domain to use for DNS queries (TXT/A/AAAA)
  string url = 9; // URL encoded in probes
}

// An end message, indicates the worker should stop sending out probes
message End {
  uint32 code = 1; // 0 -> finished, 1 -> CLI disconnect
}

// Origin: the source address and port combinations used by workers in a measurement, alongside an identifier
message Origin {
  Address src = 1;
  fixed32 sport = 2;
  fixed32 dport = 3;
  fixed32 origin_id = 4;
}

// Configuration: mapping of worker ID to origin
message Configuration {
  Origin origin = 1;
  uint32 worker_id = 2;
}

// A list of target addresses
message Targets {
  repeated Address dst_list = 1;
  optional bool is_discovery = 2; // whether the targets are being probed as discovery (responsiveness, latency)
}

// A TaskResult, contains the worker that executed the task, and a list of results
message TaskResult {
  uint32 worker_id = 1;
  repeated Reply result_list = 2;
}

// A reply, either a PingResult, UDPResult, or TCPResult; the IP result, the receive time, and the origin ID of the reply
message Reply {
  Address src = 1;
  fixed32 ttl = 2;
  uint64 rx_time = 3; // receive time of the reply
  uint64 tx_time = 4;
  fixed32 tx_worker_id = 5;
  fixed32 origin_id = 6; // ID of the destination origin (ip, ports) of the reply
  optional bool is_discovery = 7; // whether the reply is part of a discovery measurement
  optional string chaos = 8;
}
